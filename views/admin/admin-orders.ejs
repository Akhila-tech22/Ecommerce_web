<%- include('../partials/admin/header') %>
<!-- Bootstrap 5 CSS CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">


<style>
  :root {
    --primary-color: #1e90ff;
    --secondary-color: #2d3436;
    --success-color: #00b894;
    --danger-color: #d63031;
    --info-color: #0984e3;
    --warning-color: #fdcb6e;
    --secondary-bg: #636e72;
    --light-gray: #dfe6e9;
    --background-color: #f5f6fa;
    --white: #ffffff;
    --shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
    --transition: all 0.3s ease;
    --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  body, .container-fluid {
    background-color: var(--background-color);
    font-family: var(--font-family);
    color: var(--secondary-color);
    margin-left: 116px;
        margin-top: 82px;
  }

  h1 {
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 1.5rem;
  }

  .card {
    border-radius: 0.5rem;
    box-shadow: var(--shadow);
    border: none;
    background-color: var(--white);
    transition: var(--transition);
        margin-left: 126px;
  }

  .card-header {
    font-weight: 600;
    font-size: 1.2rem;
    color: var(--secondary-color);
    background-color: var(--light-gray);
    border-bottom: 1px solid #ccc;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .card-header i {
    color: var(--primary-color);
  }

  .table-responsive {
    overflow-x: auto;
  }

  table.order-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0 0.7rem;
  }

  table.order-table thead th {
    text-transform: uppercase;
    font-weight: 700;
    color: var(--secondary-bg);
    border-bottom: 2px solid var(--primary-color);
    padding: 12px 15px;
    background-color: transparent;
  }

  table.order-table tbody tr {
    background-color: var(--white);
    box-shadow: var(--shadow);
    transition: var(--transition);
    border-radius: 0.5rem;
  }

  table.order-table tbody tr:hover {
    box-shadow: 0 10px 30px rgba(30, 144, 255, 0.15);
  }

  table.order-table tbody td {
    vertical-align: middle;
    padding: 12px 15px;
    color: var(--secondary-color);
    font-size: 0.95rem;
  }

  /* Status badges with refined colors */
  .status-badge {
    display: inline-block;
    padding: 6px 14px;
    border-radius: 15px;
    font-weight: 600;
    font-size: 0.85rem;
    color: var(--white);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    user-select: none;
    transition: var(--transition);
    min-width: 110px;
    text-align: center;
  }
  .bg-success { background-color: var(--success-color); }
  .bg-danger { background-color: var(--danger-color); }
  .bg-info { background-color: var(--info-color); }
  .bg-warning { background-color: var(--warning-color); color: #2d3436; }
  .bg-secondary { background-color: var(--secondary-bg); }

  /* Product image and name alignment */
  .order-table tbody td img {
    border-radius: 6px;
    box-shadow: 0 0 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }
  .order-table tbody td img:hover {
    transform: scale(1.05);
  }

  .order-table tbody td div > div {
    line-height: 1.2;
  }

  /* Buttons in actions column */
  .order-actions .btn {
    margin: 0 4px 6px 0;
    font-size: 0.85rem;
    font-weight: 600;
    padding: 6px 12px;
    border-radius: 6px;
    transition: var(--transition);
  }

  .order-actions .btn-primary {
    background-color: var(--primary-color);
    border: none;
  }
  .order-actions .btn-primary:hover {
    background-color: #1764c0;
  }

  .order-actions .btn-success {
    background-color: var(--success-color);
    border: none;
  }
  .order-actions .btn-success:hover {
    background-color: #009e7f;
  }

  .order-actions .btn-danger {
    background-color: var(--danger-color);
    border: none;
  }
  .order-actions .btn-danger:hover {
    background-color: #b32424;
  }

  .order-actions .btn-info {
    background-color: var(--info-color);
    border: none;
  }
  .order-actions .btn-info:hover {
    background-color: #0661c3;
  }

  /* Modal styling */
  .modal-content {
    border-radius: 0.6rem;
    box-shadow: var(--shadow);
    font-family: var(--font-family);
  }

  .modal-header {
    border-bottom: 1px solid var(--light-gray);
    font-weight: 700;
    color: var(--secondary-color);
  }

  .modal-title {
    font-size: 1.25rem;
  }

  .form-label {
    font-weight: 600;
    color: var(--secondary-color);
  }

  .form-control, .form-select {
    border-radius: 0.4rem;
    border: 1px solid #ccc;
    transition: border-color 0.3s ease;
  }

  .form-control:focus, .form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 6px rgba(30, 144, 255, 0.3);
  }

  .btn-close {
    filter: brightness(0.6);
    transition: filter 0.3s ease;
  }
  .btn-close:hover {
    filter: brightness(1);
  }
  .status-badge {
  padding: 5px 10px;
  color: white;
  border-radius: 5px;
  display: inline-block;
  font-size: 0.75rem;
}
 .bg-light {
    background-color: #f9f9f9 !important; /* Light grey */
  }
  .bg-white {
    background-color: #ffffff !important; /* White */
  }
</style>






    
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            All Orders
        </div>
        <div class="card-body">
          
                <table class="table table-striped order-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Product</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
  <% orders.forEach((order, orderIndex) => { %>
    <% const shadeClass = orderIndex % 2 === 0 ? 'bg-light' : 'bg-white'; %>

    <% order.orderedItems.forEach((item, itemIndex) => { %>
      <tr class="<%= shadeClass %>">
        <% if (itemIndex === 0) { %>
          <!-- Order ID -->
          <td rowspan="<%= order.orderedItems.length %>">#<%= order.orderId %></td>

          <!-- Date -->
          <td rowspan="<%= order.orderedItems.length %>">
            <%= new Date(order.createdOn).toLocaleDateString() %>
          </td>

          <!-- Customer -->
          <td rowspan="<%= order.orderedItems.length %>">
            <strong><%= order.address.name %></strong>
          </td>
        <% } %>

        <!-- Product -->
        <td>
          <div class="d-flex align-items-center">
            <img src="/<%= item.productImages[0] %>" 
                 alt="<%= item.productName %>" 
                 style="width: 50px; height: 50px; object-fit: cover;" 
                 class="me-2 rounded">
            <div>
              <div><%= item.productName %></div>
              <small class="text-muted">Qty: <%= item.quantity %></small>
              <p>Size : <%= item.size%></p>
            </div>
          </div>
        </td>

        <!-- Amount -->
        <td>â‚¹<%= Math.round(item.price * item.quantity) %></td>

        <!-- Status (Individual per item if applicable) -->
        <td>
          <span class="status-badge <%= 
            item.status === 'delivered' ? 'bg-success' :
            item.status === 'cancelled' ? 'bg-danger' :
            item.status === 'shipped' ? 'bg-info' :
            item.status === 'return_requested' ? 'bg-warning' :
            item.status === 'approved' ? 'bg-info' :
            item.status === 'rejected' ? 'bg-secondary' :
            'bg-warning'
          %>">
            <%= item.status ? item.status.toUpperCase() : order.status.toUpperCase() %>
          </span>
        </td>

        <!-- Actions (per item) -->
        <td>
          <a href="/admin/orders/<%= order._id %>?itemId=<%= item.productId %>" 
             class="btn btn-primary btn-sm mb-1">
            View Details
          </a>

          <% if (item.status === 'return_requested') { %>
            <button onclick="handleReturn('<%= order._id %>', '<%= item.product %>', 'approved','<%= item.size%>')" 
                    class="btn btn-success btn-sm mb-1">
              Approve Return
            </button>
            <button onclick="handleReturn('<%= order._id %>', '<%= item.product %>', 'rejected','<%= item.size%>')" 
                    class="btn btn-danger btn-sm mb-1">
              Reject
            </button>
          <% } else if (!['cancelled', 'delivered', 'approved', 'return_requested', 'rejected'].includes(item.status)) { %>
            <button onclick="updateStatus('<%= order._id %>', '<%= item.product %>','<%= item.size%>')" 
                    class="btn btn-info btn-sm mb-1">
              Update Status
            </button>
            <button onclick="cancelOrder('<%= order._id %>', '<%= item.product %>', '<%= item.size%>')" 
                    class="btn btn-danger btn-sm">
              Cancel
            </button>
          <% } %>
        </td>
      </tr>
    <% }); %>
  <% }); %>
</tbody>

                </table>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let currentOrderId = null;

async function updateStatus(orderId, productId, size) {
    const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'confirmed': 'Confirmed',
            'shipped': 'Shipped',
            'delivered': 'Delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/orders/update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, productId, status , size}),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}

async function cancelOrder(orderId,productId,size ) {
    const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch('/admin/orders/cancel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId,productId,size }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order cancelled successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to cancel order'
            });
        }
    }
}

                      

  function handleReturn(orderId,productId, newStatus,size) {
    
    Swal.fire({
      title: `Are you sure you want to ${newStatus === 'approved' ? 'approve' : 'reject'} this return?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: newStatus === 'approved' ? '#28a745' : '#dc3545',
      cancelButtonColor: '#6c757d',
      confirmButtonText: `Yes, ${newStatus}`
    }).then((result) => {
      if (result.isConfirmed) {
        fetch('/admin/orders/handle-return', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ orderId, productId, newStatus , size })
        })
        .then(response => response.json())
        .then(data => {
          console.log("Server response:", data);
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success!',
              text: data.message
            }).then(() => location.reload());
          } else {
            Swal.fire({ icon: 'error', title: 'Error', text: data.message });
          }
        })
        .catch(err => {
          console.error("Fetch error:", err);
          Swal.fire({ icon: 'error', title: 'Error', text: 'Something went wrong!' });
        });
      }
    });
  }





async function submitRejection() {
    const category = document.getElementById('rejectionCategory').value;
    const reason = document.getElementById('rejectionReason').value;

    if (!category || !reason.trim()) {
        Swal.fire({
            icon: 'warning',
            title: 'Missing Information',
            text: 'Please select a category and provide a detailed explanation.'
        });
        return;
    }

    try {
        const response = await fetch('/admin/orders/handle-return', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: currentOrderId,
                action: 'reject',
                rejectionCategory: category,
                rejectionReason: reason
            })
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Rejected',
                text: 'Return request has been rejected.'
            }).then(() => {
                const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
                modal.hide();
                location.reload();
            });
        } else {
            throw new Error(data.message || 'Something went wrong');
        }
    } catch (error) {
        console.error('Rejection error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to reject return request'
        });
    }
}


</script>

<%- include('../partials/admin/footer') %>