<%- include("../../views/partials/admin/header") %>
<style>
    :root {
        --primary-color: #2563eb;
        --secondary-color: #64748b;
        --success-color: #059669;
        --danger-color: #dc2626;
        --warning-color: #d97706;
        --info-color: #0891b2;
        --light-gray: #f8fafc;
        --border-color: #e2e8f0;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --white: #ffffff;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        --border-radius: 8px;
    }

    .dashboard-container {
        background-color: var(--light-gray);
        min-height: 100vh;
    }

    .main-content {
   width: 100%;
    padding: 20px 30px;
    padding-left: 280px;
    margin-top: 74px;
    margin-left: 21px;

    }

    .dashboard-header {
        margin-bottom: 32px;
    }

    .dashboard-title {
        color: var(--text-primary);
        font-size: 28px;
        font-weight: 600;
        margin: 0;
    }

    .dashboard-subtitle {
        color: var(--text-secondary);
        font-size: 16px;
        margin-top: 4px;
    }

    /* Stats Cards */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 24px;
        margin-bottom: 32px;
    }

    .stat-card {
        background: var(--white);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        padding: 24px;
        box-shadow: var(--shadow-sm);
        transition: all 0.2s ease;
    }

    .stat-card:hover {
        box-shadow: var(--shadow-md);
    }

    .stat-card-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 16px;
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: var(--border-radius);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
    }

    .stat-icon.blue { background-color: #dbeafe; color: var(--primary-color); }
    .stat-icon.green { background-color: #dcfce7; color: var(--success-color); }
    .stat-icon.orange { background-color: #fed7aa; color: var(--warning-color); }
    .stat-icon.purple { background-color: #e9d5ff; color: #7c3aed; }

    .stat-value {
        font-size: 32px;
        font-weight: 700;
        color: var(--text-primary);
        line-height: 1;
        margin-bottom: 4px;
    }

    .stat-label {
        font-size: 14px;
        color: var(--text-secondary);
        margin: 0;
    }

    /* Content Grid */
    .content-grid {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 24px;
        margin-bottom: 32px;
    }

    .content-card {
        background: var(--white);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-sm);
        overflow: hidden;
    }

    .card-header {
        padding: 20px 24px;
        border-bottom: 1px solid var(--border-color);
        background: var(--white);
    }

    .card-title {
        font-size: 18px;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0;
    }

    .card-content {
        padding: 24px;
    }

    /* Chart Container */
    .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
    }

    .chart-controls {
        display: flex;
        gap: 8px;
    }

    .chart-btn {
        padding: 6px 16px;
        border: 1px solid var(--border-color);
        background: var(--white);
        color: var(--text-secondary);
        border-radius: 6px;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .chart-btn.active,
    .chart-btn:hover {
        background: var(--primary-color);
        color: var(--white);
        border-color: var(--primary-color);
    }

    /* Tables */
    .table-container {
        overflow-x: auto;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
    }

    .data-table th {
        background: var(--light-gray);
        color: var(--text-primary);
        font-weight: 600;
        font-size: 14px;
        padding: 12px 16px;
        text-align: left;
        border-bottom: 1px solid var(--border-color);
    }

    .data-table td {
        padding: 12px 16px;
        border-bottom: 1px solid var(--border-color);
        font-size: 14px;
        color: var(--text-primary);
    }

    .data-table tr:hover {
        background: var(--light-gray);
    }

    .product-cell {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .product-image {
        width: 32px;
        height: 32px;
        border-radius: 4px;
        object-fit: cover;
    }

    .status-badge {
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
        text-transform: capitalize;
    }

    .status-delivered { background: #dcfce7; color: #166534; }
    .status-pending { background: #fef3c7; color: #92400e; }
    .status-cancelled { background: #fee2e2; color: #991b1b; }

    .order-link {
        color: var(--primary-color);
        text-decoration: none;
        font-weight: 500;
    }

    .order-link:hover {
        text-decoration: underline;
    }

    .view-all-btn {
        display: inline-flex;
        align-items: center;
        padding: 8px 16px;
        background: var(--primary-color);
        color: var(--white);
        text-decoration: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .view-all-btn:hover {
        background: #1d4ed8;
        color: var(--white);
        text-decoration: none;
    }

    .table-footer {
        padding: 16px 24px;
        border-top: 1px solid var(--border-color);
        text-align: right;
        background: var(--light-gray);
    }

    .filter-select {
        padding: 6px 12px;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        font-size: 14px;
        background: var(--white);
        color: var(--text-primary);
    }

    .empty-state {
        text-align: center;
        color: var(--text-secondary);
        font-style: italic;
    }

    /* Loading Animation */
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Report Buttons */
    .report-btn-group {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .active-filter {
        background: var(--primary-color) !important;
        color: var(--white) !important;
        border-color: var(--primary-color) !important;
    }

    @media (max-width: 968px) {
        .report-btn-group {
            flex-direction: column;
        }
    }

    @media (max-width: 768px) {
        .main-content {
            padding-left: 20px;
        }
        
        .content-grid {
            grid-template-columns: 1fr;
        }
        
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }
    /* Top Selling Styles */
.top-selling-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 24px;
}

.top-selling-card {
    background: var(--white);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    overflow: hidden;
}

.top-selling-header {
    padding: 16px 24px;
    border-bottom: 1px solid var(--border-color);
    background: var(--white);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.top-selling-title {
    font-size: 18px;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
}

.top-selling-table {
    width: 100%;
    border-collapse: collapse;
}

.top-selling-table th {
    background: var(--light-gray);
    color: var(--text-primary);
    font-weight: 600;
    font-size: 14px;
    padding: 12px 16px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.top-selling-table td {
    padding: 12px 16px;
    border-bottom: 1px solid var(--border-color);
    font-size: 14px;
    color: var(--text-primary);
}

.loading-spinner {
    display: inline-block;
    width: 24px;
    height: 24px;
    border: 3px solid var(--border-color);
    border-radius: 50%;
    border-top-color: var(--primary-color);
    animation: spin 1s linear infinite;
}
</style>

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="dashboard-container">
    <div class="main-content">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
            <h1 class="dashboard-title">Dashboard</h1>
            <p class="dashboard-subtitle">Welcome back! Here's what's happening with your store.</p>
        </div>

        <!-- Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-card-header">
                    <div class="stat-icon blue">
                        <i class="fas fa-box"></i>
                    </div>
                </div>
                <div class="stat-value"><%= dashboardData.productCount %></div>
                <p class="stat-label">Total Products</p>
            </div>

            <div class="stat-card">
                <div class="stat-card-header">
                    <div class="stat-icon green">
                        <i class="fas fa-users"></i>
                    </div>
                </div>
                <div class="stat-value"><%= dashboardData.userCount %></div>
                <p class="stat-label">Total Customers</p>
            </div>

            <div class="stat-card">
                <div class="stat-card-header">
                    <div class="stat-icon orange">
                        <i class="fas fa-shopping-bag"></i>
                    </div>
                </div>
                <div class="stat-value"><%= dashboardData.orderCount %></div>
                <p class="stat-label">Total Orders</p>
            </div>

            <div class="stat-card">
                <div class="stat-card-header">
                    <div class="stat-icon purple">
                        <i class="fas fa-rupee-sign"></i>
                    </div>
                </div>
                <div class="stat-value">₹<%= dashboardData.totalRevenue.toLocaleString() %></div>
                <p class="stat-label">Total Revenue</p>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="content-grid">
            <div class="content-card">
                <div class="card-header">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <h3 class="card-title">Sales Overview</h3>
                        <div class="chart-controls">
                            <button class="chart-btn" id="weeklyBtn" onclick="updateSalesChart('weekly')">Weekly</button>
                            <button class="chart-btn active" id="monthlyBtn" onclick="updateSalesChart('monthly')">Monthly</button>
                            <button class="chart-btn" id="yearlyBtn" onclick="updateSalesChart('yearly')">Yearly</button>
                        </div>
                    </div>
                </div>
                <div class="card-content">
                    <div class="chart-container">
                        <canvas id="salesChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="content-card">
                <div class="card-header">
                    <h3 class="card-title">Order Status</h3>
                </div>
                <div class="card-content">
                    <div class="chart-container">
                        <canvas id="orderStatusChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
                <!-- Top Selling Section -->
<div class="content-grid" style="margin-bottom: 32px;">
    <!-- Top Selling Products -->
    <div class="content-card">
        <div class="card-header">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <h3 class="card-title">Top Selling Products</h3>
                <div class="chart-controls">
                    <button class="chart-btn active" onclick="updateTopSelling('products')">Products</button>
                    <button class="chart-btn" onclick="updateTopSelling('categories')">Categories</button>
                    <button class="chart-btn" onclick="updateTopSelling('brands')">Brands</button>
                </div>
            </div>
        </div>
        <div class="card-content">
            <div class="table-container">
                <table class="data-table">
                    <thead id="topSellingHeader">
                        <tr>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Sold</th>
                            <th>Revenue</th>
                        </tr>
                    </thead>
                    <tbody id="topSellingTableBody">
                        <% if (dashboardData.topSellingProducts?.length > 0) { %>
                            <% dashboardData.topSellingProducts.forEach(product => { %>
                                <tr>
                                    <td>
                                        <div class="product-cell">
                                            <img src="<%= product.image || 'https://via.placeholder.com/32' %>" class="product-image" alt="Product">
                                            <span><%= product.name %></span>
                                        </div>
                                    </td>
                                    <td><%= product.category %></td>
                                    <td>₹<%= product.price.toLocaleString() %></td>
                                    <td><%= product.soldCount %></td>
                                    <td>₹<%= product.totalRevenue.toLocaleString() %></td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr><td colspan="5" class="empty-state">No products found</td></tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Top Selling Summary -->
    <div class="content-card">
        <div class="card-header">
            <h3 class="card-title">Sales Summary</h3>
        </div>
        <div class="card-content">
            <div class="stats-grid" style="grid-template-columns: 1fr; gap: 16px;">
                <div class="stat-card">
                    <div class="stat-card-header">
                        <div class="stat-icon blue">
                            <i class="fas fa-star"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="topProductRevenue">₹<%= dashboardData.topProductsRevenue?.toLocaleString() || '0' %></div>
                    <p class="stat-label">Revenue from Top 10 Products</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-card-header">
                        <div class="stat-icon green">
                            <i class="fas fa-tags"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="topCategoryRevenue">₹<%= dashboardData.topCategoriesRevenue?.toLocaleString() || '0' %></div>
                    <p class="stat-label">Revenue from Top 10 Categories</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-card-header">
                        <div class="stat-icon purple">
                            <i class="fas fa-copyright"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="topBrandRevenue">₹<%= dashboardData.topBrandsRevenue?.toLocaleString() || '0' %></div>
                    <p class="stat-label">Revenue from Top 10 Brands</p>
                </div>
            </div>
        </div>
    </div>
</div>


        <!-- Sales Report Section -->
        <div class="content-card" style="margin-bottom: 32px;">
            <div class="card-header">
                <h3 class="card-title">Sales Report Generator</h3>
            </div>
            <div class="card-content">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 24px;">
                    <!-- Quick Filters -->
                    <div>
                        <label style="display: block; margin-bottom: 8px; font-weight: 500; color: var(--text-primary);">Quick Filters</label>
                        <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                            <button class="chart-btn" onclick="setQuickFilter('today')">Today</button>
                            <button class="chart-btn" onclick="setQuickFilter('week')">This Week</button>
                            <button class="chart-btn" onclick="setQuickFilter('month')">This Month</button>
                            <button class="chart-btn" onclick="setQuickFilter('year')">This Year</button>
                        </div>
                    </div>
                    
                    <!-- Custom Date Range -->
                    <div>
                        <label style="display: block; margin-bottom: 8px; font-weight: 500; color: var(--text-primary);">Custom Date Range</label>
                        <div style="display: flex; gap: 12px;">
                            <input type="date" id="startDate" class="filter-select" style="flex: 1;">
                            <input type="date" id="endDate" class="filter-select" style="flex: 1;">
                        </div>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div style="display: flex; align-items: center; justify-content: space-between; padding-top: 16px; border-top: 1px solid var(--border-color);">
                    <button class="view-all-btn" onclick="generateSalesReport()" style="background: var(--success-color);">
                        <i class="fas fa-chart-line" style="margin-right: 8px;"></i>
                        Generate Report
                    </button>
                    
                    <div style="display: flex; gap: 12px;">
                        <button class="view-all-btn" onclick="downloadReport('pdf')" style="background: var(--danger-color);">
                            <i class="fas fa-file-pdf" style="margin-right: 8px;"></i>
                            Download PDF
                        </button>
                        <button class="view-all-btn" onclick="downloadReport('excel')" style="background: var(--success-color);">
                            <i class="fas fa-file-excel" style="margin-right: 8px;"></i>
                            Download Excel
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sales Report Summary -->
        <div class="stats-grid" id="salesSummary" style="display: none; margin-bottom: 32px;">
            <div class="stat-card">
                <div class="stat-value" id="totalOrders">0</div>
                <p class="stat-label">Total Orders</p>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalSalesAmount">₹0</div>
                <p class="stat-label">Total Sales Amount</p>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalDiscount">₹0</div>
                <p class="stat-label">Total Discount</p>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="netRevenue">₹0</div>
                <p class="stat-label">Net Revenue</p>
            </div>
        </div>

        <!-- Detailed Sales Report Table -->
        <div class="content-card" id="salesReportSection" style="display: none; margin-bottom: 32px;">
            <div class="card-header">
                <h3 class="card-title">Detailed Sales Report</h3>
            </div>
            <div class="card-content">
                <div style="max-height: 500px; overflow-y: auto;">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Products</th>
                                <th>Original Amount</th>
                                <th>Discount Applied</th>
                                <th>Coupon Code</th>
                                <th>Final Amount</th>
                                
                            </tr>
                        </thead>
                        <tbody id="salesReportTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Loading Indicator -->
                <div id="loadingIndicator" style="display: none; text-align: center; padding: 40px;">
                    <div style="display: inline-block; width: 32px; height: 32px; border: 3px solid var(--border-color); border-radius: 50%; border-top-color: var(--primary-color); animation: spin 1s linear infinite;"></div>
                    <p style="margin-top: 16px; color: var(--text-secondary);">Loading report...</p>
                </div>
            </div>
        </div>

      
        
            <div class="content-card">
                <div class="card-header">
                    <h3 class="card-title">Recent Orders</h3>
                </div>
                <div class="card-content">
                    <div class="table-container">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Amount</th>
                                    
                                </tr>
                            </thead>
<tbody>
    <% if (dashboardData.recentOrders?.length > 0) { %>
        <% dashboardData.recentOrders.forEach(order => { 
            // Determine overall status based on orderedItems.status
            let overallStatus = 'pending';
            const itemStatuses = order.orderedItems.map(item => item.status);
            
            if (itemStatuses.every(status => status === 'delivered')) {
                overallStatus = 'delivered';
            } else if (itemStatuses.every(status => status === 'cancelled')) {
                overallStatus = 'cancelled';
            } else if (itemStatuses.some(status => status === 'shipped')) {
                overallStatus = 'shipped';
            } else if (itemStatuses.some(status => status === 'confirmed')) {
                overallStatus = 'confirmed';
            } else {
                overallStatus = itemStatuses[0] || 'pending';
            }
        %>
            <tr>
                <td>
                    <a href="/admin/orders/<%= order._id %>" class="order-link">
                        #<%= order.orderId.slice(-6) %>
                    </a>
                </td>
                <td><%= order.customerName %></td>
                <td>₹<%= order.finalAmount.toLocaleString() %></td>

            </tr>
        <% }) %>
    <% } else { %>
        <tr><td colspan="4" class="empty-state">No recent orders</td></tr>
    <% } %>
</tbody>
                        </table>
                    </div>
                </div>
                <div class="table-footer">
                    <a href="/admin/orders" class="view-all-btn">
                        <i class="fas fa-arrow-right" style="margin-left: 8px; font-size: 12px;"></i>
                        View All Orders
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Update top selling items table
// Update top selling items table
function updateTopSelling(type) {
    // Update button states
    document.querySelectorAll('.content-card .chart-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Find the clicked button and make it active
    const clickedBtn = event.target;
    clickedBtn.classList.add('active');
    
    // Update table header
    const header = document.getElementById('topSellingHeader');
    const tableBody = document.getElementById('topSellingTableBody');
    
    // Show loading state
    tableBody.innerHTML = '<tr><td colspan="5" style="text-align: center; padding: 20px;"><div class="loading-spinner"></div></td></tr>';
    
    fetch(`/admin/api/top-selling?type=${type}`)
        .then(res => {
            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }
            return res.json();
        })
        .then(data => {
            if (type === 'products') {
                header.innerHTML = `
                    <tr>
                        <th>Product</th>
                        <th>Category</th>
                        <th>Price</th>
                        <th>Sold</th>
                        <th>Revenue</th>
                    </tr>
                `;
                
                if (data.products && data.products.length > 0) {
                    tableBody.innerHTML = data.products.map(product => `
                        <tr>
                            <td>
                                <div class="product-cell">
                                    <img src="${product.image || 'https://via.placeholder.com/32'}" class="product-image" alt="Product" onerror="this.src='https://via.placeholder.com/32'">
                                    <span>${product.name || 'Unknown Product'}</span>
                                </div>
                            </td>
                            <td>${product.category || 'Unknown'}</td>
                            <td>₹${(product.price || 0).toLocaleString()}</td>
                            <td>${product.soldCount || 0}</td>
                            <td>₹${(product.totalRevenue || 0).toLocaleString()}</td>
                        </tr>
                    `).join('');
                } else {
                    tableBody.innerHTML = '<tr><td colspan="5" class="empty-state">No products found</td></tr>';
                }
                
                // Update revenue display
                const revenueElement = document.getElementById('topProductRevenue');
                if (revenueElement) {
                    revenueElement.textContent = `₹${(data.totalRevenue || 0).toLocaleString()}`;
                }
                
            } else if (type === 'categories') {
                header.innerHTML = `
                    <tr>
                        <th>Category</th>
                        <th>Products</th>
                        <th>Avg Price</th>
                        <th>Sold</th>
                        <th>Revenue</th>
                    </tr>
                `;
                
                if (data.categories && data.categories.length > 0) {
                    tableBody.innerHTML = data.categories.map(category => `
                        <tr>
                            <td>${category.name || 'Unknown Category'}</td>
                            <td>${category.productCount || 0}</td>
                            <td>₹${Math.round(category.averagePrice || 0).toLocaleString()}</td>
                            <td>${category.soldCount || 0}</td>
                            <td>₹${(category.totalRevenue || 0).toLocaleString()}</td>
                        </tr>
                    `).join('');
                } else {
                    tableBody.innerHTML = '<tr><td colspan="5" class="empty-state">No categories found</td></tr>';
                }
                
                // Update revenue display
                const revenueElement = document.getElementById('topCategoryRevenue');
                if (revenueElement) {
                    revenueElement.textContent = `₹${(data.totalRevenue || 0).toLocaleString()}`;
                }
                
            } else if (type === 'brands') {
                header.innerHTML = `
                    <tr>
                        <th>Brand</th>
                        <th>Products</th>
                        <th>Avg Price</th>
                        <th>Sold</th>
                        <th>Revenue</th>
                    </tr>
                `;
                
                if (data.brands && data.brands.length > 0) {
                    tableBody.innerHTML = data.brands.map(brand => `
                        <tr>
                            <td>${brand.name || 'Unknown Brand'}</td>
                            <td>${brand.productCount || 0}</td>
                            <td>₹${Math.round(brand.averagePrice || 0).toLocaleString()}</td>
                            <td>${brand.soldCount || 0}</td>
                            <td>₹${(brand.totalRevenue || 0).toLocaleString()}</td>
                        </tr>
                    `).join('');
                } else {
                    tableBody.innerHTML = '<tr><td colspan="5" class="empty-state">No brands found</td></tr>';
                }
                
                // Update revenue display
                const revenueElement = document.getElementById('topBrandRevenue');
                if (revenueElement) {
                    revenueElement.textContent = `₹${(data.totalRevenue || 0).toLocaleString()}`;
                }
            }
        })
        .catch(err => {
            console.error('Failed to load top selling items:', err);
            tableBody.innerHTML = '<tr><td colspan="5" class="error-state">Failed to load data. Please try again.</td></tr>';
        });
}
    // Global variables for current filter settings
    let currentFilters = {
        startDate: null,
        endDate: null,
        period: 'monthly'
    };

    // Initialize Charts
    const salesCtx = document.getElementById('salesChart').getContext('2d');
    const salesData = <%- JSON.stringify(dashboardData.salesData) %>;
    const salesLabels = <%- JSON.stringify(dashboardData.salesLabels) %>;

    const salesChart = new Chart(salesCtx, {
        type: 'line',
        data: {
            labels: salesLabels,
            datasets: [{
                label: 'Sales (₹)',
                data: salesData,
                backgroundColor: 'rgba(37, 99, 235, 0.1)',
                borderColor: 'rgba(37, 99, 235, 1)',
                borderWidth: 2,
                fill: true,
                tension: 0.4,
                pointBackgroundColor: 'rgba(37, 99, 235, 1)',
                pointBorderColor: '#ffffff',
                pointBorderWidth: 2,
                pointRadius: 4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    titleColor: '#ffffff',
                    bodyColor: '#ffffff',
                    borderColor: 'rgba(37, 99, 235, 1)',
                    borderWidth: 1,
                    callbacks: {
                        label: context => 'Sales: ₹' + context.parsed.y.toLocaleString()
                    }
                }
            },
            scales: {
                x: {
                    grid: {
                        display: false
                    },
                    ticks: {
                        color: '#64748b'
                    }
                },
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(226, 232, 240, 0.5)'
                    },
                    ticks: {
                        color: '#64748b',
                        callback: value => '₹' + value.toLocaleString()
                    }
                }
            }
        }
    });

    const statusCtx = document.getElementById('orderStatusChart').getContext('2d');
    new Chart(statusCtx, {
        type: 'doughnut',
        data: {
            labels: <%- JSON.stringify(dashboardData.orderStatusLabels) %>,
            datasets: [{
                data: <%- JSON.stringify(dashboardData.orderStatusData) %>,
                backgroundColor: [
                    'rgba(5, 150, 105, 0.8)',
                    'rgba(37, 99, 235, 0.8)', 
                    'rgba(220, 38, 38, 0.8)',
                    'rgba(217, 119, 6, 0.8)',
                    'rgba(124, 58, 237, 0.8)'
                ],
                borderColor: [
                    'rgba(5, 150, 105, 1)',
                    'rgba(37, 99, 235, 1)',
                    'rgba(220, 38, 38, 1)',
                    'rgba(217, 119, 6, 1)',
                    'rgba(124, 58, 237, 1)'
                ],
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        usePointStyle: true,
                        color: '#1e293b'
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    titleColor: '#ffffff',
                    bodyColor: '#ffffff'
                }
            }
        }
    });

    // Set quick filter dates
    function setQuickFilter(period) {
        const today = new Date();
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        
        // Remove active class from all quick filter buttons
        document.querySelectorAll('.chart-btn').forEach(btn => {
            if (btn.textContent.includes('Today') || btn.textContent.includes('Week') || 
                btn.textContent.includes('Month') || btn.textContent.includes('Year')) {
                btn.classList.remove('active-filter');
            }
        });
        
        // Add active class to clicked button
        event.target.classList.add('active-filter');
        
        endDate.value = today.toISOString().split('T')[0];
        
        switch(period) {
            case 'today':
                startDate.value = today.toISOString().split('T')[0];
                break;
            case 'week':
                const weekStart = new Date(today);
                weekStart.setDate(today.getDate() - 7);
                startDate.value = weekStart.toISOString().split('T')[0];
                break;
            case 'month':
                const monthStart = new Date(today);
                monthStart.setMonth(today.getMonth() - 1);
                startDate.value = monthStart.toISOString().split('T')[0];
                break;
            case 'year':
                const yearStart = new Date(today);
                yearStart.setFullYear(today.getFullYear() - 1);
                startDate.value = yearStart.toISOString().split('T')[0];
                break;
        }
        
        currentFilters.startDate = startDate.value;
        currentFilters.endDate = endDate.value;
        currentFilters.period = period;
    }

    // Generate sales report
    function generateSalesReport() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        
        if (!startDate || !endDate) {
            alert('Please select both start and end dates');
            return;
        }
        
        if (new Date(startDate) > new Date(endDate)) {
            alert('Start date cannot be after end date');
            return;
        }
        
        currentFilters.startDate = startDate;
        currentFilters.endDate = endDate;
        
        showLoadingIndicator(true);
        
        fetch('/admin/api/sales-report', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                startDate: startDate,
                endDate: endDate
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to generate report');
            }
            return response.json();
        })
        .then(data => {
            updateSalesStats(data.stats);
            updateSalesReportTable(data.orders);
            showSalesReportSections(true);
            showLoadingIndicator(false);
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to generate sales report. Please try again.');
            showLoadingIndicator(false);
        });
    }

    // Update sales statistics
    function updateSalesStats(stats) {
        document.getElementById('totalOrders').textContent = stats.totalOrders || 0;
        document.getElementById('totalSalesAmount').textContent = '₹' + (stats.totalSalesAmount || 0).toLocaleString();
        document.getElementById('totalDiscount').textContent = '₹' + (stats.totalDiscount || 0).toLocaleString();
        document.getElementById('netRevenue').textContent = '₹' + (stats.netRevenue || 0).toLocaleString();
    }

    // Update sales report table
    function updateSalesReportTable(orders) {
        const tableBody = document.getElementById('salesReportTableBody');
        
        if (!orders || orders.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="9" class="empty-state">No orders found for selected date range</td></tr>';
            return;
        }
        
        tableBody.innerHTML = orders.map(order => `
            <tr>
                <td>${new Date(order.createdAt).toLocaleDateString('en-IN')}</td>
                <td>
                    <a href="/admin/orders/${order._id}" class="order-link">
                        #${order.orderId.slice(-6)}
                    </a>
                </td>
                <td>${order.customerName}</td>
                <td>${order.products.length} item(s)</td>
                <td>₹${order.originalAmount.toLocaleString()}</td>
                <td>₹${(order.discountAmount || 0).toLocaleString()}</td>
                <td>${order.couponDetails?.couponCode || 'N/A'}</td>

                <td>₹${order.finalAmount.toLocaleString()}</td>
              
            </tr>
        `).join('');
    }

    // Download report function
    function downloadReport(format) {
        if (!currentFilters.startDate || !currentFilters.endDate) {
            alert('Please generate a report first before downloading');
            return;
        }
        
        const downloadData = {
            format: format,
            startDate: currentFilters.startDate,
            endDate: currentFilters.endDate,
            filters: currentFilters
        };
        
        // Create a form and submit it to trigger download
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/admin/api/download-sales-report';
        form.style.display = 'none';
        
        Object.keys(downloadData).forEach(key => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = typeof downloadData[key] === 'object' ? JSON.stringify(downloadData[key]) : downloadData[key];
            form.appendChild(input);
        });
        
        document.body.appendChild(form);
        form.submit();
        document.body.removeChild(form);
    }

    // Show/hide loading indicator
    function showLoadingIndicator(show) {
        const indicator = document.getElementById('loadingIndicator');
        indicator.style.display = show ? 'block' : 'none';
    }

    // Show/hide sales report sections
    function showSalesReportSections(show) {
        const summarySection = document.getElementById('salesSummary');
        const reportSection = document.getElementById('salesReportSection');
        
        summarySection.style.display = show ? 'grid' : 'none';
        reportSection.style.display = show ? 'block' : 'none';
    }

    // Chart update function
    function updateSalesChart(period) {
        // Update button states
        document.querySelectorAll('.chart-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.getElementById(`${period}Btn`).classList.add('active');

        // Fetch new data
        fetch(`/admin/api/sales-data?period=${period}`)
            .then(res => res.json())
            .then(data => {
                salesChart.data.labels = data.labels;
                salesChart.data.datasets[0].data = data.data;
                salesChart.update('active');
            })
            .catch(err => {
                console.error('Failed to update chart:', err);
            });
    }

    // Top selling products/categories toggle
    function updateTopSellingProducts(filter) {
        const title = document.getElementById("topSellingTitle");
        const tableHeader = document.getElementById('tableHeader');
        const tableBody = document.getElementById('topSellingItemsTable');

        title.textContent = filter === 'products' ? 'Top Selling Products' : 'Top Selling Categories';
        
        tableHeader.innerHTML = filter === 'products' ? `
            <th>Product</th>
            <th>Category</th>
            <th>Price</th>
            <th>Sold</th>
        ` : `
            <th>Category</th>
            <th>Products</th>
            <th>Total Sales</th>
            <th>Items Sold</th>
        `;

        fetch(`/admin/api/top-selling?type=${filter}`)
            .then(res => res.json())
            .then(data => {
                const items = filter === 'products' ? data.products : data.categories;
                
                if (!items || items.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="4" class="empty-state">No ${filter} found</td></tr>`;
                    return;
                }

                tableBody.innerHTML = items.map(item => {
                    if (filter === 'products') {
                        return `
                            <tr>
                                <td>
                                    <div class="product-cell">
                                        <img src="${item.image || 'https://via.placeholder.com/32'}" class="product-image" alt="Product">
                                        <span>${item.name}</span>
                                    </div>
                                </td>
                                <td>${item.category}</td>
                                <td>₹${item.price.toLocaleString()}</td>
                                <td>${item.soldCount}</td>
                            </tr>
                        `;
                    } else {
                        return `
                            <tr>
                                <td>${item.name}</td>
                                <td>${item.productCount}</td>
                                <td>₹${item.totalSales.toLocaleString()}</td>
                                <td>${item.soldCount}</td>
                            </tr>
                        `;
                    }
                }).join('');
            })
            .catch(err => {
                console.error('Failed to load data:', err);
                tableBody.innerHTML = `<tr><td colspan="4" class="empty-state">Failed to load ${filter}</td></tr>`;
            });
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        updateSalesChart('monthly');
        updateTopSellingProducts('products');
        
        // Set default date range to current month
        setQuickFilter('month');
    });
</script>

<%- include("../../views/partials/admin/footer") %>